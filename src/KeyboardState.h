#ifndef KEYBOARDSTATE_H__
#define KEYBOARDSTATE_H__

#include <SDL2/SDL.h>

#include <array>

#include "Flags.h"


class KeyboardState
{
    friend class Keyboard;
public:
    enum class ScanCode: SDL_Keycode
    {
        Unknown = SDL_SCANCODE_UNKNOWN,
        Return = SDL_SCANCODE_RETURN,
        Escape = SDL_SCANCODE_ESCAPE,
        Backspace = SDL_SCANCODE_BACKSPACE,
        Tab = SDL_SCANCODE_TAB,
        Space = SDL_SCANCODE_SPACE,
        Comma = SDL_SCANCODE_COMMA,
        Minus = SDL_SCANCODE_MINUS,
        Period = SDL_SCANCODE_PERIOD,
        Slash = SDL_SCANCODE_SLASH,
        Num0 = SDL_SCANCODE_0,
        Num1 = SDL_SCANCODE_1,
        Num2 = SDL_SCANCODE_2,
        Num3 = SDL_SCANCODE_3,
        Num4 = SDL_SCANCODE_4,
        Num5 = SDL_SCANCODE_5,
        Num6 = SDL_SCANCODE_6,
        Num7 = SDL_SCANCODE_7,
        Num8 = SDL_SCANCODE_8,
        Num9 = SDL_SCANCODE_9,
        Semicolon = SDL_SCANCODE_SEMICOLON,
        Equals = SDL_SCANCODE_EQUALS,
        LeftBracket = SDL_SCANCODE_LEFTBRACKET,
        Backslash = SDL_SCANCODE_BACKSLASH,
        RightBracket = SDL_SCANCODE_RIGHTBRACKET,
        A = SDL_SCANCODE_A,
        B = SDL_SCANCODE_B,
        C = SDL_SCANCODE_C,
        D = SDL_SCANCODE_D,
        E = SDL_SCANCODE_E,
        F = SDL_SCANCODE_F,
        G = SDL_SCANCODE_G,
        H = SDL_SCANCODE_H,
        I = SDL_SCANCODE_I,
        J = SDL_SCANCODE_J,
        K = SDL_SCANCODE_K,
        L = SDL_SCANCODE_L,
        M = SDL_SCANCODE_M,
        N = SDL_SCANCODE_N,
        O = SDL_SCANCODE_O,
        P = SDL_SCANCODE_P,
        Q = SDL_SCANCODE_Q,
        R = SDL_SCANCODE_R,
        S = SDL_SCANCODE_S,
        T = SDL_SCANCODE_T,
        U = SDL_SCANCODE_U,
        V = SDL_SCANCODE_V,
        W = SDL_SCANCODE_W,
        X = SDL_SCANCODE_X,
        Y = SDL_SCANCODE_Y,
        Z = SDL_SCANCODE_Z,
        CapsLock = SDL_SCANCODE_CAPSLOCK,
        F1 = SDL_SCANCODE_F1,
        F2 = SDL_SCANCODE_F2,
        F3 = SDL_SCANCODE_F3,
        F4 = SDL_SCANCODE_F4,
        F5 = SDL_SCANCODE_F5,
        F6 = SDL_SCANCODE_F6,
        F7 = SDL_SCANCODE_F7,
        F8 = SDL_SCANCODE_F8,
        F9 = SDL_SCANCODE_F9,
        F10 = SDL_SCANCODE_F10,
        F11 = SDL_SCANCODE_F11,
        F12 = SDL_SCANCODE_F12,
        PrintScreen = SDL_SCANCODE_PRINTSCREEN,
        ScrollLock = SDL_SCANCODE_SCROLLLOCK,
        Pause = SDL_SCANCODE_PAUSE,
        Insert = SDL_SCANCODE_INSERT,
        Home = SDL_SCANCODE_HOME,
        PageUp = SDL_SCANCODE_PAGEUP,
        Delete = SDL_SCANCODE_DELETE,
        End = SDL_SCANCODE_END,
        PageDown = SDL_SCANCODE_PAGEDOWN,
        Right = SDL_SCANCODE_RIGHT,
        Left = SDL_SCANCODE_LEFT,
        Down = SDL_SCANCODE_DOWN,
        Up = SDL_SCANCODE_UP,
        NumLockClear = SDL_SCANCODE_NUMLOCKCLEAR,
        KeyPadDivide = SDL_SCANCODE_KP_DIVIDE,
        KeyPadMultiply = SDL_SCANCODE_KP_MULTIPLY,
        KeyPadMinus = SDL_SCANCODE_KP_MINUS,
        KeyPadPlus = SDL_SCANCODE_KP_PLUS,
        KeyPadEnter = SDL_SCANCODE_KP_ENTER,
        KeyPad1 = SDL_SCANCODE_KP_1,
        KeyPad2 = SDL_SCANCODE_KP_2,
        KeyPad3 = SDL_SCANCODE_KP_3,
        KeyPad4 = SDL_SCANCODE_KP_4,
        KeyPad5 = SDL_SCANCODE_KP_5,
        KeyPad6 = SDL_SCANCODE_KP_6,
        KeyPad7 = SDL_SCANCODE_KP_7,
        KeyPad8 = SDL_SCANCODE_KP_8,
        KeyPad9 = SDL_SCANCODE_KP_9,
        KeyPad0 = SDL_SCANCODE_KP_0,
        KeyPadPeriod = SDL_SCANCODE_KP_PERIOD,
        Application = SDL_SCANCODE_APPLICATION,
        Power = SDL_SCANCODE_POWER,
        KeyPadEquals = SDL_SCANCODE_KP_EQUALS,
        F13 = SDL_SCANCODE_F13,
        F14 = SDL_SCANCODE_F14,
        F15 = SDL_SCANCODE_F15,
        F16 = SDL_SCANCODE_F16,
        F17 = SDL_SCANCODE_F17,
        F18 = SDL_SCANCODE_F18,
        F19 = SDL_SCANCODE_F19,
        F20 = SDL_SCANCODE_F20,
        F21 = SDL_SCANCODE_F21,
        F22 = SDL_SCANCODE_F22,
        F23 = SDL_SCANCODE_F23,
        F24 = SDL_SCANCODE_F24,
        Execute = SDL_SCANCODE_EXECUTE,
        Help = SDL_SCANCODE_HELP,
        Menu = SDL_SCANCODE_MENU,
        Select = SDL_SCANCODE_SELECT,
        Stop = SDL_SCANCODE_STOP,
        Again = SDL_SCANCODE_AGAIN,
        Undo = SDL_SCANCODE_UNDO,
        Cut = SDL_SCANCODE_CUT,
        Copy = SDL_SCANCODE_COPY,
        Paste = SDL_SCANCODE_PASTE,
        Find = SDL_SCANCODE_FIND,
        Mute = SDL_SCANCODE_MUTE,
        VolumeUp = SDL_SCANCODE_VOLUMEUP,
        VolumeDown = SDL_SCANCODE_VOLUMEDOWN,
        KeyPadComma = SDL_SCANCODE_KP_COMMA,
        EqualsAs400 = SDL_SCANCODE_KP_EQUALSAS400,

        AltErase = SDL_SCANCODE_ALTERASE,
        SysReq = SDL_SCANCODE_SYSREQ,
        Cancel = SDL_SCANCODE_CANCEL,
        Clear = SDL_SCANCODE_CLEAR,
        Prior = SDL_SCANCODE_PRIOR,
        Return2 = SDL_SCANCODE_RETURN2,
        Separator = SDL_SCANCODE_SEPARATOR,
        Out = SDL_SCANCODE_OUT,
        Oper = SDL_SCANCODE_OPER,
        ClearAgain = SDL_SCANCODE_CLEARAGAIN,
        CrSel = SDL_SCANCODE_CRSEL,
        ExSel = SDL_SCANCODE_EXSEL,

        Kp00 = SDL_SCANCODE_KP_00,
        Kp000 = SDL_SCANCODE_KP_000,
        ThousandsSeparator = SDL_SCANCODE_THOUSANDSSEPARATOR,
        DecimalSeparator = SDL_SCANCODE_DECIMALSEPARATOR,
        CurrencyUnit = SDL_SCANCODE_CURRENCYUNIT,
        CurrentcySubunit = SDL_SCANCODE_CURRENCYSUBUNIT,
        KeyPadLeftParen = SDL_SCANCODE_KP_LEFTPAREN,
        KeyPadRightParent = SDL_SCANCODE_KP_RIGHTPAREN,
        KeyPadLeftBrace = SDL_SCANCODE_KP_LEFTBRACE,
        KeyPadRightBrace = SDL_SCANCODE_KP_RIGHTBRACE,
        KeyPadTab = SDL_SCANCODE_KP_TAB,
        KeyPadBackspace = SDL_SCANCODE_KP_BACKSPACE,
        KeyPadA = SDL_SCANCODE_KP_A,
        KeyPadB = SDL_SCANCODE_KP_B,
        KeyPadC = SDL_SCANCODE_KP_C,
        KeyPadD = SDL_SCANCODE_KP_D,
        KeyPadE = SDL_SCANCODE_KP_E,
        KeyPadF = SDL_SCANCODE_KP_F,
        KeyPadXor = SDL_SCANCODE_KP_XOR,
        KeyPadPower = SDL_SCANCODE_KP_POWER,
        KeyPadPercent = SDL_SCANCODE_KP_PERCENT,
        KeyPadLessThan = SDL_SCANCODE_KP_LESS,
        KeyPadGreaterThan = SDL_SCANCODE_KP_GREATER,
        KeyPadAmpersand = SDL_SCANCODE_KP_AMPERSAND,
        KeyPadDoubleAmpersand = SDL_SCANCODE_KP_DBLAMPERSAND,
        KeyPadVerticalBar = SDL_SCANCODE_KP_VERTICALBAR,
        KeyPadDoubleVerticalBar = SDL_SCANCODE_KP_DBLVERTICALBAR,
        KeyPadColon = SDL_SCANCODE_KP_COLON,
        KeyPadHash = SDL_SCANCODE_KP_HASH,
        KeyPadSpace = SDL_SCANCODE_KP_SPACE,
        KeyPadAt = SDL_SCANCODE_KP_AT,
        KeyPadExclaim = SDL_SCANCODE_KP_EXCLAM,
        KeyPadMemStore = SDL_SCANCODE_KP_MEMSTORE,
        KeyPadMemRecall = SDL_SCANCODE_KP_MEMRECALL,
        KeyPadMemClear = SDL_SCANCODE_KP_MEMCLEAR,
        KeyPadMemAdd = SDL_SCANCODE_KP_MEMADD,
        KeyPadMemSubtract = SDL_SCANCODE_KP_MEMSUBTRACT,
        KeyPadMemMultiply = SDL_SCANCODE_KP_MEMMULTIPLY,
        KeyPadMemDivide = SDL_SCANCODE_KP_MEMDIVIDE,
        KeyPadPlusMinus = SDL_SCANCODE_KP_PLUSMINUS,
        KeyPadClear = SDL_SCANCODE_KP_CLEAR,
        KeyPadClearEntry = SDL_SCANCODE_KP_CLEARENTRY,
        KeyPadBinary = SDL_SCANCODE_KP_BINARY,
        KeyPadOctal = SDL_SCANCODE_KP_OCTAL,
        KeyPadDecimal = SDL_SCANCODE_KP_DECIMAL,
        KeyPadHexadecimal = SDL_SCANCODE_KP_HEXADECIMAL,

        LControl = SDL_SCANCODE_LCTRL,
        LShift = SDL_SCANCODE_LSHIFT,
        LAlt = SDL_SCANCODE_LALT,
        LGui = SDL_SCANCODE_LGUI,
        RControl = SDL_SCANCODE_RCTRL,
        RShift = SDL_SCANCODE_RSHIFT,
        RAlt = SDL_SCANCODE_RALT,
        RGui = SDL_SCANCODE_RGUI,

        Mode = SDL_SCANCODE_MODE,

        AudioNext = SDL_SCANCODE_AUDIONEXT,
        AudioPrev = SDL_SCANCODE_AUDIOPREV,
        AudioStop = SDL_SCANCODE_AUDIOSTOP,
        AudioPlay = SDL_SCANCODE_AUDIOPLAY,
        AudioMute = SDL_SCANCODE_AUDIOMUTE,
        MediaSelect = SDL_SCANCODE_MEDIASELECT,
        Www = SDL_SCANCODE_WWW,
        Mail = SDL_SCANCODE_MAIL,
        Calculator = SDL_SCANCODE_CALCULATOR,
        Computer = SDL_SCANCODE_COMPUTER,
        AcSearch = SDL_SCANCODE_AC_SEARCH,
        AcHome = SDL_SCANCODE_AC_HOME,
        AcBack = SDL_SCANCODE_AC_BACK,
        AcForward = SDL_SCANCODE_AC_FORWARD,
        AcStop = SDL_SCANCODE_AC_STOP,
        AcRefresh = SDL_SCANCODE_AC_REFRESH,
        AcBookmarks = SDL_SCANCODE_AC_BOOKMARKS,

        BrightnessDown = SDL_SCANCODE_BRIGHTNESSDOWN, 
        BrightnessUp = SDL_SCANCODE_BRIGHTNESSUP,
        DisplaySwitch = SDL_SCANCODE_DISPLAYSWITCH,
        KdbIllumToggle = SDL_SCANCODE_KBDILLUMTOGGLE, 
        KdbIllumDown = SDL_SCANCODE_KBDILLUMDOWN,
        KdbIllumUp = SDL_SCANCODE_KBDILLUMUP,
        Eject = SDL_SCANCODE_EJECT,
        Sleep = SDL_SCANCODE_SLEEP

    }; 

    enum class Key: SDL_Keycode
    {
        Unknown = SDLK_UNKNOWN,
        Return = SDLK_RETURN,
        Escape = SDLK_ESCAPE,
        Backspace = SDLK_BACKSPACE,
        Tab = SDLK_TAB,
        Space = SDLK_SPACE,
        Exclaimation = SDLK_EXCLAIM,
        DoubleQuote = SDLK_QUOTEDBL,
        Hash = SDLK_HASH,
        Percent = SDLK_PERCENT,
        Dollar = SDLK_DOLLAR,
        Ampersand = SDLK_AMPERSAND,
        Quote = SDLK_QUOTE,
        LeftParen = SDLK_LEFTPAREN,
        RightParen = SDLK_RIGHTPAREN,
        Asterisk = SDLK_ASTERISK,
        Plus = SDLK_PLUS,
        Comma = SDLK_COMMA,
        Minus = SDLK_MINUS,
        Period = SDLK_PERIOD,
        Slash = SDLK_SLASH,
        Num0 = SDLK_0,
        Num1 = SDLK_1,
        Num2 = SDLK_2,
        Num3 = SDLK_3,
        Num4 = SDLK_4,
        Num5 = SDLK_5,
        Num6 = SDLK_6,
        Num7 = SDLK_7,
        Num8 = SDLK_8,
        Num9 = SDLK_9,
        Colon = SDLK_COLON,
        Semicolon = SDLK_SEMICOLON,
        LessThan = SDLK_LESS,
        Equals = SDLK_EQUALS,
        GreaterThan = SDLK_GREATER,
        Question = SDLK_QUESTION,
        At = SDLK_AT,
        LeftBracket = SDLK_LEFTBRACKET,
        Backslash = SDLK_BACKSLASH,
        RightBracket = SDLK_RIGHTBRACKET,
        Caret = SDLK_CARET,
        Underscore = SDLK_UNDERSCORE,
        Backquote = SDLK_BACKQUOTE,
        A = SDLK_a,
        B = SDLK_b,
        C = SDLK_c,
        D = SDLK_d,
        E = SDLK_e,
        F = SDLK_f,
        G = SDLK_g,
        H = SDLK_h,
        I = SDLK_i,
        J = SDLK_j,
        K = SDLK_k,
        L = SDLK_l,
        M = SDLK_m,
        N = SDLK_n,
        O = SDLK_o,
        P = SDLK_p,
        Q = SDLK_q,
        R = SDLK_r,
        S = SDLK_s,
        T = SDLK_t,
        U = SDLK_u,
        V = SDLK_v,
        W = SDLK_w,
        X = SDLK_x,
        Y = SDLK_y,
        Z = SDLK_z,
        CapsLock = SDLK_CAPSLOCK,
        F1 = SDLK_F1,
        F2 = SDLK_F2,
        F3 = SDLK_F3,
        F4 = SDLK_F4,
        F5 = SDLK_F5,
        F6 = SDLK_F6,
        F7 = SDLK_F7,
        F8 = SDLK_F8,
        F9 = SDLK_F9,
        F10 = SDLK_F10,
        F11 = SDLK_F11,
        F12 = SDLK_F12,
        PrintScreen = SDLK_PRINTSCREEN,
        ScrollLock = SDLK_SCROLLLOCK,
        Pause = SDLK_PAUSE,
        Insert = SDLK_INSERT,
        Home = SDLK_HOME,
        PageUp = SDLK_PAGEUP,
        Delete = SDLK_DELETE,
        End = SDLK_END,
        PageDown = SDLK_PAGEDOWN,
        Right = SDLK_RIGHT,
        Left = SDLK_LEFT,
        Down = SDLK_DOWN,
        Up = SDLK_UP,
        NumLockClear = SDLK_NUMLOCKCLEAR,
        KeyPadDivide = SDLK_KP_DIVIDE,
        KeyPadMultiply = SDLK_KP_MULTIPLY,
        KeyPadMinus = SDLK_KP_MINUS,
        KeyPadPlus = SDLK_KP_PLUS,
        KeyPadEnter = SDLK_KP_ENTER,
        KeyPad1 = SDLK_KP_1,
        KeyPad2 = SDLK_KP_2,
        KeyPad3 = SDLK_KP_3,
        KeyPad4 = SDLK_KP_4,
        KeyPad5 = SDLK_KP_5,
        KeyPad6 = SDLK_KP_6,
        KeyPad7 = SDLK_KP_7,
        KeyPad8 = SDLK_KP_8,
        KeyPad9 = SDLK_KP_9,
        KeyPad0 = SDLK_KP_0,
        KeyPadPeriod = SDLK_KP_PERIOD,
        Application = SDLK_APPLICATION,
        Power = SDLK_POWER,
        KeyPadEquals = SDLK_KP_EQUALS,
        F13 = SDLK_F13,
        F14 = SDLK_F14,
        F15 = SDLK_F15,
        F16 = SDLK_F16,
        F17 = SDLK_F17,
        F18 = SDLK_F18,
        F19 = SDLK_F19,
        F20 = SDLK_F20,
        F21 = SDLK_F21,
        F22 = SDLK_F22,
        F23 = SDLK_F23,
        F24 = SDLK_F24,
        Execute = SDLK_EXECUTE,
        Help = SDLK_HELP,
        Menu = SDLK_MENU,
        Select = SDLK_SELECT,
        Stop = SDLK_STOP,
        Again = SDLK_AGAIN,
        Undo = SDLK_UNDO,
        Cut = SDLK_CUT,
        Copy = SDLK_COPY,
        Paste = SDLK_PASTE,
        Find = SDLK_FIND,
        Mute = SDLK_MUTE,
        VolumeUp = SDLK_VOLUMEUP,
        VolumeDown = SDLK_VOLUMEDOWN,
        KeyPadComma = SDLK_KP_COMMA,
        EqualsAs400 = SDLK_KP_EQUALSAS400,

        AltErase = SDLK_ALTERASE,
        SysReq = SDLK_SYSREQ,
        Cancel = SDLK_CANCEL,
        Clear = SDLK_CLEAR,
        Prior = SDLK_PRIOR,
        Return2 = SDLK_RETURN2,
        Separator = SDLK_SEPARATOR,
        Out = SDLK_OUT,
        Oper = SDLK_OPER,
        ClearAgain = SDLK_CLEARAGAIN,
        CrSel = SDLK_CRSEL,
        ExSel = SDLK_EXSEL,

        Kp00 = SDLK_KP_00,
        Kp000 = SDLK_KP_000,
        ThousandsSeparator = SDLK_THOUSANDSSEPARATOR,
        DecimalSeparator = SDLK_DECIMALSEPARATOR,
        CurrencyUnit = SDLK_CURRENCYUNIT,
        CurrentcySubunit = SDLK_CURRENCYSUBUNIT,
        KeyPadLeftParen = SDLK_KP_LEFTPAREN,
        KeyPadRightParent = SDLK_KP_RIGHTPAREN,
        KeyPadLeftBrace = SDLK_KP_LEFTBRACE,
        KeyPadRightBrace = SDLK_KP_RIGHTBRACE,
        KeyPadTab = SDLK_KP_TAB,
        KeyPadBackspace = SDLK_KP_BACKSPACE,
        KeyPadA = SDLK_KP_A,
        KeyPadB = SDLK_KP_B,
        KeyPadC = SDLK_KP_C,
        KeyPadD = SDLK_KP_D,
        KeyPadE = SDLK_KP_E,
        KeyPadF = SDLK_KP_F,
        KeyPadXor = SDLK_KP_XOR,
        KeyPadPower = SDLK_KP_POWER,
        KeyPadPercent = SDLK_KP_PERCENT,
        KeyPadLessThan = SDLK_KP_LESS,
        KeyPadGreaterThan = SDLK_KP_GREATER,
        KeyPadAmpersand = SDLK_KP_AMPERSAND,
        KeyPadDoubleAmpersand = SDLK_KP_DBLAMPERSAND,
        KeyPadVerticalBar = SDLK_KP_VERTICALBAR,
        KeyPadDoubleVerticalBar = SDLK_KP_DBLVERTICALBAR,
        KeyPadColon = SDLK_KP_COLON,
        KeyPadHash = SDLK_KP_HASH,
        KeyPadSpace = SDLK_KP_SPACE,
        KeyPadAt = SDLK_KP_AT,
        KeyPadExclaim = SDLK_KP_EXCLAM,
        KeyPadMemStore = SDLK_KP_MEMSTORE,
        KeyPadMemRecall = SDLK_KP_MEMRECALL,
        KeyPadMemClear = SDLK_KP_MEMCLEAR,
        KeyPadMemAdd = SDLK_KP_MEMADD,
        KeyPadMemSubtract = SDLK_KP_MEMSUBTRACT,
        KeyPadMemMultiply = SDLK_KP_MEMMULTIPLY,
        KeyPadMemDivide = SDLK_KP_MEMDIVIDE,
        KeyPadPlusMinus = SDLK_KP_PLUSMINUS,
        KeyPadClear = SDLK_KP_CLEAR,
        KeyPadClearEntry = SDLK_KP_CLEARENTRY,
        KeyPadBinary = SDLK_KP_BINARY,
        KeyPadOctal = SDLK_KP_OCTAL,
        KeyPadDecimal = SDLK_KP_DECIMAL,
        KeyPadHexadecimal = SDLK_KP_HEXADECIMAL,

        LControl = SDLK_LCTRL,
        LShift = SDLK_LSHIFT,
        LAlt = SDLK_LALT,
        LGui = SDLK_LGUI,
        RControl = SDLK_RCTRL,
        RShift = SDLK_RSHIFT,
        RAlt = SDLK_RALT,
        RGui = SDLK_RGUI,

        Mode = SDLK_MODE,

        AudioNext = SDLK_AUDIONEXT,
        AudioPrev = SDLK_AUDIOPREV,
        AudioStop = SDLK_AUDIOSTOP,
        AudioPlay = SDLK_AUDIOPLAY,
        AudioMute = SDLK_AUDIOMUTE,
        MediaSelect = SDLK_MEDIASELECT,
        Www = SDLK_WWW,
        Mail = SDLK_MAIL,
        Calculator = SDLK_CALCULATOR,
        Computer = SDLK_COMPUTER,
        AcSearch = SDLK_AC_SEARCH,
        AcHome = SDLK_AC_HOME,
        AcBack = SDLK_AC_BACK,
        AcForward = SDLK_AC_FORWARD,
        AcStop = SDLK_AC_STOP,
        AcRefresh = SDLK_AC_REFRESH,
        AcBookmarks = SDLK_AC_BOOKMARKS,

        BrightnessDown = SDLK_BRIGHTNESSDOWN, 
        BrightnessUp = SDLK_BRIGHTNESSUP,
        DisplaySwitch = SDLK_DISPLAYSWITCH,
        KdbIllumToggle = SDLK_KBDILLUMTOGGLE, 
        KdbIllumDown = SDLK_KBDILLUMDOWN,
        KdbIllumUp = SDLK_KBDILLUMUP,
        Eject = SDLK_EJECT,
        Sleep = SDLK_SLEEP
    };

    enum class ModKey
    {
        LShift = KMOD_LSHIFT,
        RShift = KMOD_RSHIFT,
        LControl = KMOD_LCTRL,
        RControl = KMOD_RCTRL,
        LAlt = KMOD_LALT,
        RAlt = KMOD_RALT,
        LGui = KMOD_LGUI,
        RGui = KMOD_RGUI,
        Num = KMOD_NUM,
        Caps = KMOD_CAPS,
        Mode = KMOD_MODE,
    };

    enum class KeyState
    {
        Up,
        Down
    };

    ~KeyboardState() = default;

    KeyboardState(const KeyboardState& other);
    KeyboardState(KeyboardState&& other) noexcept;
    KeyboardState& operator =(const KeyboardState& other);
    KeyboardState& operator =(KeyboardState&& other) noexcept;

    KeyState get_scancode_state(ScanCode code) const;
    KeyState get_key_state(Key key) const;

    Flags<ModKey> mod_keys() const {return m_mod_keys;}

protected:
    KeyboardState() {};

    std::array<uint8_t, SDL_NUM_SCANCODES> m_scan_codes;
    Flags<ModKey> m_mod_keys;

private:
};


inline KeyboardState::KeyState KeyboardState::get_scancode_state(KeyboardState::ScanCode code) const
{
    return m_scan_codes[static_cast<size_t>(code)] == 1 ? KeyState::Up : KeyState::Down; 
}
 
inline KeyboardState::KeyState KeyboardState::get_key_state(KeyboardState::Key key) const
{
    auto scan_code = SDL_GetScancodeFromKey(static_cast<SDL_Keycode>(key));
    if(scan_code >= m_scan_codes.size()) 
    {
        return KeyState::Up;
    }
    return get_scancode_state(static_cast<ScanCode>(scan_code));
}
 
#endif
    
